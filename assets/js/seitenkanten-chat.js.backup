/**
 * Seitenkanten Chat - Original Legacy Functionality
 * Restores all original PS Chat floating sidebar features
 */

(function($) {
    'use strict';
    
    // Global chat object
    window.PSSourceChat = {
        settings: {},
        initialized: false,
        minimized: false,
        userList: [],
        messages: [],
        updateTimer: null,
        typingTimer: null,
        soundEnabled: true,
        container: null,
        
        /**
         * Initialize the chat
         */
        init: function(config) {
            if (this.initialized) return;
            
            this.settings = $.extend({
                container_id: 'psource-chat',
                position: 'bottom-right',
                width: 400,
                height: 500,
                title: 'Chat',
                initial_state: 'minimized',
                ajax_url: ajaxurl || '/wp-admin/admin-ajax.php',
                nonce: '',
                user_id: 0,
                update_interval: 3000,
                enable_emoji: true,
                enable_sound: true,
                allow_guest_chat: false
            }, config || {});
            
            this.container = $('#' + this.settings.container_id);
            if (!this.container.length) return;
            
            // Load saved state from localStorage (highest priority)
            var savedState = this.loadState();
            console.log('PS Chat: Loaded saved state:', savedState);
            
            // Determine initial minimized state based on priority:
            // 1. Saved state in localStorage (highest priority)
            // 2. Extension option 'initial_state'
            // 3. Global setting 'initial_state' (fallback)
            if (savedState && savedState.minimized !== undefined) {
                this.minimized = savedState.minimized;
                console.log('PS Chat: Using saved minimized state:', this.minimized);
            } else if (this.settings.initial_state) {
                this.minimized = (this.settings.initial_state === 'minimized');
                console.log('PS Chat: Using extension initial_state:', this.settings.initial_state, '-> minimized:', this.minimized);
            } else {
                this.minimized = true; // Default fallback
                console.log('PS Chat: Using default minimized state: true');
            }
            
            this.bindEvents();
            this.initializeInterface();
            this.startUpdateLoop();
            
            // Force positioning after initialization
            this.forcePositioning();
            
            this.initialized = true;
            console.log('PS Chat: Initialized with settings:', this.settings);
        },
        
        /**
         * Bind all event handlers
         */
        bindEvents: function() {
            var self = this;
            
            // Minimize/Maximize button - use both direct and event delegation
            $(document).off('click.chatMinimize').on('click.chatMinimize', '#' + this.settings.container_id + ' .psource-chat-minimize-btn, .psource-chat-minimize-btn', function(e) {
                console.log('PS Chat: Minimize button clicked via delegation');
                e.preventDefault();
                e.stopPropagation();
                self.toggleMinimize();
            });
            
            // Settings button - use event delegation for robustness
            $(document).off('click.chatSettings').on('click.chatSettings', '#' + this.settings.container_id + ' .psource-chat-settings-btn, .psource-chat-settings-btn', function(e) {
                console.log('PS Chat: Settings button clicked via delegation');
                e.preventDefault();
                e.stopPropagation();
                self.showUserSettings();
            });
            
            // Moderation button - use event delegation
            $(document).off('click.chatModeration').on('click.chatModeration', '#' + this.settings.container_id + ' .psource-chat-moderate-btn, .psource-chat-moderate-btn', function(e) {
                console.log('PS Chat: Moderation button clicked via delegation');
                e.preventDefault();
                e.stopPropagation();
                self.showModerationMenu();
            });
            
            // Emoji button - use multiple selectors for reliability
            $(document).off('click.chatEmoji').on('click.chatEmoji', '#' + this.settings.container_id + ' .psource-chat-emoji-btn, .psource-chat-emoji-btn', function(e) {
                console.log('PS Chat: Emoji button clicked');
                e.preventDefault();
                e.stopPropagation();
                self.toggleEmojiPicker();
            });
            
            // Emoji picker clicks - always bind
            $(document).off('click.emojiSelect').on('click.emojiSelect', '.psource-chat-emoji-picker .emoji-btn', function(e) {
                console.log('PS Chat: Emoji selected:', $(this).data('emoji'));
                e.preventDefault();
                var emoji = $(this).data('emoji');
                self.insertEmoji(emoji);
                $('.psource-chat-emoji-picker').fadeOut(200);
            });
            
            // Emoji category tabs - always bind
            $(document).off('click.emojiCategory').on('click.emojiCategory', '.psource-chat-emoji-picker .emoji-tab', function(e) {
                console.log('PS Chat: Emoji category selected:', $(this).data('category'));
                e.preventDefault();
                var category = $(this).data('category');
                self.switchEmojiCategory(category);
            });
            
            // Send message
            $(document).off('click.chatSend').on('click.chatSend', '#' + this.settings.container_id + ' .psource-chat-send-btn', function(e) {
                e.preventDefault();
                self.sendMessage();
            });
            
            // Enter key in message input
            $(document).off('keypress.chatInput').on('keypress.chatInput', '#' + this.settings.container_id + ' .psource-chat-input', function(e) {
                if (e.which === 13) {
                    e.preventDefault();
                    self.sendMessage();
                }
            });
            
            // User list toggle
            $(document).off('click.userList').on('click.userList', '#' + this.settings.container_id + ' .psource-chat-users-btn', function(e) {
                e.preventDefault();
                self.toggleUserList();
            });
            
            // Guest name input
            $(document).off('blur.guestName').on('blur.guestName', '#' + this.settings.container_id + ' .psource-chat-guest-name', function() {
                var name = $(this).val().trim();
                if (name) {
                    self.setGuestName(name);
                }
            });
            
            // Window resize - reposition chat
            $(window).off('resize.psourceChat').on('resize.psourceChat', function() {
                self.forcePositioning();
            });
            
            console.log('PS Chat: All event handlers bound');
        },
        
        /**
         * Initialize the chat interface
         */
        initializeInterface: function() {
            if (this.minimized) {
                this.container.addClass('minimized');
                console.log('PS Chat: Interface initialized in minimized state');
            } else {
                this.container.removeClass('minimized');
                console.log('PS Chat: Interface initialized in expanded state');
            }
            
            // Load initial data
            this.loadMessages();
            this.loadActiveUsers();
        },
        
        /**
         * Force proper positioning based on settings
         */
        forcePositioning: function() {
            if (!this.container.length) return;
            
            var position = this.settings.position || 'bottom-right';
            var windowWidth = $(window).width();
            var windowHeight = $(window).height();
            var containerWidth = this.container.outerWidth();
            var containerHeight = this.container.outerHeight();
            
            // Remove all position classes first
            this.container.removeClass('psource-chat-bottom-right psource-chat-bottom-left psource-chat-top-right psource-chat-top-left');
            
            // Add current position class
            this.container.addClass('psource-chat-' + position);
            
            // Force CSS positioning with specific coordinates
            var css = {
                position: 'fixed',
                zIndex: '999999'
            };
            
            switch (position) {
                case 'bottom-right':
                    css.bottom = '20px';
                    css.right = '20px';
                    css.top = 'auto';
                    css.left = 'auto';
                    break;
                case 'bottom-left':
                    css.bottom = '20px';
                    css.left = '20px';
                    css.top = 'auto';
                    css.right = 'auto';
                    break;
                case 'top-right':
                    css.top = '20px';
                    css.right = '20px';
                    css.bottom = 'auto';
                    css.left = 'auto';
                    break;
                case 'top-left':
                    css.top = '20px';
                    css.left = '20px';
                    css.bottom = 'auto';
                    css.right = 'auto';
                    break;
            }
            
            this.container.css(css);
            console.log('PS Chat: Forced positioning to ' + position, css);
        },
        
        /**
         * Start the update loop for messages and users
         */
        startUpdateLoop: function() {
            if (this.updateTimer) {
                clearInterval(this.updateTimer);
            }
            
            var self = this;
            this.updateTimer = setInterval(function() {
                if (!self.minimized) {
                    self.loadMessages();
                }
                self.loadActiveUsers();
            }, this.settings.update_interval);
            
            console.log('PS Chat: Update loop started with interval:', this.settings.update_interval);
        },
        
        /**
         * Toggle minimize/maximize
         */
        toggleMinimize: function() {
            this.minimized = !this.minimized;
            
            if (this.minimized) {
                this.container.addClass('minimized');
                console.log('PS Chat: Chat minimized');
            } else {
                this.container.removeClass('minimized');
                this.loadMessages(); // Load messages when expanding
                console.log('PS Chat: Chat maximized');
            }
            
            // Save state
            this.saveState();
            
            // Update minimize button
            this.updateMinimizeButton();
        },
        
        /**
         * Update minimize button icon and text
         */
        updateMinimizeButton: function() {
            var btn = this.container.find('.psource-chat-minimize-btn');
            if (btn.length) {
                if (this.minimized) {
                    // Show maximize icon when minimized
                    btn.html('<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 3h10v10H3V3z" stroke="currentColor" stroke-width="2" fill="none"/><path d="M6 6h4v4H6V6z" fill="currentColor"/></svg>');
                    btn.attr('title', 'Chat maximieren');
                } else {
                    // Show minimize icon when expanded
                    btn.html('<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 8h8" stroke="currentColor" stroke-width="2"/></svg>');
                    btn.attr('title', 'Chat minimieren');
                }
                console.log('PS Chat: Updated minimize button for state:', this.minimized ? 'minimized' : 'expanded');
            }
        },
        
        /**
         * Save chat state to localStorage
         */
        saveState: function() {
            try {
                var state = {
                    minimized: this.minimized,
                    position: this.settings.position,
                    timestamp: Date.now()
                };
                localStorage.setItem('psource_chat_state', JSON.stringify(state));
                console.log('PS Chat: State saved:', state);
            } catch (e) {
                console.warn('PS Chat: Could not save state to localStorage:', e);
            }
        },
        
        /**
         * Load chat state from localStorage
         */
        loadState: function() {
            try {
                var stateStr = localStorage.getItem('psource_chat_state');
                if (stateStr) {
                    var state = JSON.parse(stateStr);
                    // Only use state if it's recent (last 24 hours)
                    if (state.timestamp && (Date.now() - state.timestamp < 24 * 60 * 60 * 1000)) {
                        return state;
                    }
                }
            } catch (e) {
                console.warn('PS Chat: Could not load state from localStorage:', e);
            }
            return null;
        },
        
        /**
         * Load messages from server
         */
        loadMessages: function() {
            var lastMessageId = this.getLastMessageId();
            
            console.log('PS Chat: Loading messages...');
            this.ajaxRequest('get_messages', {
                last_message_id: lastMessageId,
                type: 'public'
            }, function(response) {
                console.log('PS Chat: Load messages response:', response);
                if (response.success && response.data && response.data.messages) {
                    console.log('PS Chat: Found', response.data.messages.length, 'messages');
                    this.displayMessages(response.data.messages);
                } else {
                    console.log('PS Chat: No new messages');
                }
            }.bind(this));
        },
        
        /**
         * Load active users
         */
        loadActiveUsers: function() {
            this.ajaxRequest('get_users', {}, function(response) {
                console.log('PS Chat: Load users response:', response);
                if (response.success) {
                    // Handle both response.data.users and response.users formats
                    var users = response.data?.users || response.users || [];
                    this.displayUsers(users);
                } else {
                    console.log('PS Chat: Failed to load users:', response);
                }
            }.bind(this));
        },
        
        /**
         * Display messages
         */
        displayMessages: function(messages) {
            if (!messages || !messages.length) {
                console.log('PS Chat: No messages to display');
                return;
            }
            
            console.log('PS Chat: Displaying', messages.length, 'messages');
            
            var messageArea = this.container.find('.psource-chat-messages');
            if (!messageArea.length) return;
            
            messages.forEach(function(message) {
                var messageHtml = this.formatMessage(message);
                messageArea.append(messageHtml);
                this.messages.push(message);
            }.bind(this));
            
            // Scroll to bottom
            messageArea.scrollTop(messageArea[0].scrollHeight);
            
            // Update message counter
            this.updateMessageCounter();
        },
        
        /**
         * Display users in user list
         */
        displayUsers: function(users) {
            this.userList = users || [];
            
            var userListContainer = this.container.find('.psource-chat-user-list');
            if (!userListContainer.length) return;
            
            userListContainer.empty();
            
            if (this.userList.length === 0) {
                userListContainer.html('<div class="no-users">Keine Benutzer online</div>');
                return;
            }
            
            this.userList.forEach(function(user) {
                var userHtml = '<div class="chat-user" data-user-id="' + user.id + '">' +
                    '<img src="' + user.avatar + '" class="user-avatar" alt="' + user.name + '">' +
                    '<span class="user-name">' + user.name + '</span>' +
                    '<span class="user-status ' + user.status + '"></span>' +
                    '</div>';
                userListContainer.append(userHtml);
            });
            
            console.log('PS Chat: Displayed', this.userList.length, 'users');
        },
        
        /**
         * Send a message
         */
        sendMessage: function() {
            var input = this.container.find('.psource-chat-input');
            var message = input.val().trim();
            
            if (!message) return;
            
            console.log('PS Chat: Sending message:', message);
            
            this.ajaxRequest('send_message', {
                message: message,
                type: 'public'
            }, function(response) {
                if (response.success) {
                    input.val('');
                    this.loadMessages(); // Reload messages to show new one
                    console.log('PS Chat: Message sent successfully');
                } else {
                    console.error('PS Chat: Failed to send message:', response);
                }
            }.bind(this));
        },
        
        /**
         * Toggle user list visibility
         */
        toggleUserList: function() {
            var userList = this.container.find('.psource-chat-user-list');
            var btn = this.container.find('.psource-chat-users-btn');
            
            if (userList.is(':visible')) {
                userList.hide();
                btn.removeClass('active');
            } else {
                userList.show();
                btn.addClass('active');
                this.loadActiveUsers(); // Refresh user list when showing
            }
        },
        
        /**
         * Toggle emoji picker
         */
        toggleEmojiPicker: function() {
            console.log('PS Chat: Toggle emoji picker called');
            
            // Toggle behavior: if picker exists, remove it
            var existingPicker = $('.psource-chat-emoji-picker');
            if (existingPicker.length) {
                existingPicker.fadeOut(200, function() {
                    $(this).remove();
                });
                $(document).off('click.emojiOutside');
                return;
            }
            
            // Remove any other menus first
            $('.psource-chat-settings-menu, .psource-chat-moderation-menu').remove();
            
            // Create picker if it doesn't exist
            if ($('.psource-chat-emoji-picker').length === 0) {
                console.log('PS Chat: Creating new emoji picker');
                this.createEmojiPicker();
            }
            
            var picker = $('.psource-chat-emoji-picker');
            console.log('PS Chat: Found emoji picker elements:', picker.length);
            
            if (picker.length === 0) {
                console.error('PS Chat: Failed to create emoji picker');
                return;
            }
            
            console.log('PS Chat: Showing emoji picker');
            
            // Position picker relative to chat container
            var container = this.container;
            var emojiBtn = container.find('.psource-chat-emoji-btn');
            
            if (emojiBtn.length === 0) {
                console.error('PS Chat: Emoji button not found for positioning');
                return;
            }
            
            // Calculate position relative to the emoji button
            var btnOffset = emojiBtn.offset();
            var windowWidth = $(window).width();
            var windowHeight = $(window).height();
            
            // Default position: above the input area, aligned with emoji button
            var pickerWidth = 300;
            var pickerHeight = 250;
            
            var left = btnOffset.left;
            var bottom = windowHeight - btnOffset.top + 10; // Above the button
            
            // Adjust if picker would go off-screen
            if (left + pickerWidth > windowWidth) {
                left = windowWidth - pickerWidth - 20;
            }
            if (left < 20) {
                left = 20;
            }
            
            // If there's not enough space above, show below
            if (bottom + pickerHeight > windowHeight - 20) {
                bottom = windowHeight - btnOffset.top - emojiBtn.outerHeight() - pickerHeight - 10;
            }
            
            picker.css({
                'position': 'fixed',
                'left': left + 'px',
                'bottom': bottom + 'px',
                'z-index': '1000001'
            });
            
            picker.fadeIn(200);
            console.log('PS Chat: Emoji picker positioned and shown');
            
            // Initialize first category
            this.switchEmojiCategory('smileys');
            
            // Hide menu when clicking outside - use timeout to prevent immediate close
            setTimeout(function() {
                $(document).off('click.emojiOutside').on('click.emojiOutside', function(e) {
                    if (!$(e.target).closest('.psource-chat-emoji-picker, .psource-chat-emoji-btn').length) {
                        $('.psource-chat-emoji-picker').fadeOut(200, function() {
                            $(this).remove();
                        });
                        $(document).off('click.emojiOutside');
                    }
                });
            }, 100);
        },
        
        /**
         * Create emoji picker if it doesn't exist
         */
        createEmojiPicker: function() {
            if ($('.psource-chat-emoji-picker').length > 0) return;
            
            // Original emoji string from legacy code
            var emoji_string = '😀,😃,😄,😁,😆,😅,🤣,😂,😊,😇,😍,🤩,😘,😗,😚,😛,🤪,😜,😝,🤑,🤗,🤭,🤫,🤔,🤐,🤨,😐,😑,😶,😏,😒,🙄,😬,🤥,😔,😪,🤤,😴,😷,🤒,🤕,🤢,🤮,🤧,🥵,🥶,🥴,😵,🤯,🤠,🥳,😎,🤓,🧐,😕,😟,😮,😳,😨,😢,😭,😱,😣,😓,😫,😤,🥱,😠,🤬,😈,👿,💩,🤡,👽,👻,💋,👋,🤚,🖐️,✋,🖖,👌,🤏,✌️,🤞,🤘,🤙,👍,👎,✊,👊,🤝,🙏,💪,👂,👃,🧠,👅,👄,💏,👩‍❤️‍💋‍👨,💑,👩‍❤️‍👨,👪,💘,💖,💗,💓,💕,💔,❤️,💯,💢,💬,💤,🛑,📣,📯,🔔,🎵,⛔,🚫,☢️,☣️,♀️,♂️,‼️,⁉️,❓,❗,🙈,🙉,🙊,💥,💦,🐵,🐶,🐺,🦊,🦝,🐱,🦁,🐯,🐴,🦄,🦓,🐮,🐷,🐭,🐹,🐻,🦇,🐔,🐣,🐧,🦅,🐍,🐲,🦖,🦕,🐟,🦈,🐛,🐜,🐝,🕷️,🍀,🌲,🌳,🌴,🌵,🍂,🍄,🌍,🌎,🌏,🌐,🌟,🌠,☁️,⛅,⛈️,🌤️,🌥️,🌦️,🌧️,🌨️,🌩️,🌪️,🌫️,🌈,⚡,❄️,🔥,💧,🌊,🎄,✨,💌,💶,🏝️,⚔️,⚰️,🛏️,🚿,🚽,🍏,🍎,🍐,🍊,🍋,🍌,🍉,🍇,🍓,🫐,🍈,🍒,🍑,🥭,🍍,🥥,🥝,🍅,🍆,🥑,🥦,🥬,🥒,🌶️,🌽,🥕,🥔,🍠,🍞,🥯,🥖,🧀,🥨,🥐,🍔,🍟,🍕,🌭,🍿,🧂,🥓,🍖,🍗,🍠,🍙,🍚,🍛,🍜,🍝,🍠,🍡,🍢,🍣,🍤,🍥,🥮,🍦,🍧,🍨,🍩,🍪,🎂,🍰,🧁,🥧,🍫,🍬,🍭,🍮,🍯,🍼,🥛,☕,🍵,🍶,🍾,🍷,🍸,🍹,🍺,🍻,🥂,🥃,🥤,🧊,🥄,🍴,🍽️,🥢';
            
            var all_emojis = emoji_string.split(',');
            
            // Split into categories
            var smileys = all_emojis.slice(0, 50);
            var gestures = all_emojis.slice(50, 80);
            var nature = all_emojis.slice(80, 120);
            var food = all_emojis.slice(120);
            
            var pickerHtml = 
                '<div class="psource-chat-emoji-picker" style="display: none;">' +
                '<div class="emoji-picker-tabs">' +
                '<button class="emoji-tab active" data-category="smileys">😊</button>' +
                '<button class="emoji-tab" data-category="gestures">👍</button>' +
                '<button class="emoji-tab" data-category="nature">🐶</button>' +
                '<button class="emoji-tab" data-category="food">🍎</button>' +
                '</div>' +
                '<div class="emoji-picker-content">' +
                '<div class="emoji-category" data-category="smileys">' +
                this.createEmojiButtons(smileys) +
                '</div>' +
                '<div class="emoji-category" data-category="gestures" style="display:none;">' +
                this.createEmojiButtons(gestures) +
                '</div>' +
                '<div class="emoji-category" data-category="nature" style="display:none;">' +
                this.createEmojiButtons(nature) +
                '</div>' +
                '<div class="emoji-category" data-category="food" style="display:none;">' +
                this.createEmojiButtons(food) +
                '</div>' +
                '</div>' +
                '</div>';
            
            $('body').append(pickerHtml);
            console.log('PS Chat: Emoji picker created with original emoji set');
        },
        
        /**
         * Create emoji buttons HTML
         */
        createEmojiButtons: function(emojis) {
            var html = '';
            emojis.forEach(function(emoji) {
                if (emoji && emoji.trim()) {
                    html += '<span class="emoji-btn" data-emoji="' + emoji.trim() + '">' + emoji.trim() + '</span>';
                }
            });
            return html;
        },
        
        /**
         * Switch emoji category
         */
        switchEmojiCategory: function(category) {
            $('.emoji-tab').removeClass('active');
            $('.emoji-tab[data-category="' + category + '"]').addClass('active');
            
            $('.emoji-category').hide();
            $('.emoji-category[data-category="' + category + '"]').show();
            
            console.log('PS Chat: Switched to emoji category:', category);
        },
        
        /**
         * Insert emoji into message input
         */
        insertEmoji: function(emoji) {
            var input = this.container.find('.psource-chat-input');
            if (input.length) {
                var currentText = input.val();
                input.val(currentText + emoji);
                input.focus();
                console.log('PS Chat: Inserted emoji:', emoji);
            }
        },
        
        /**
         * Show user settings modal
         */
        showUserSettings: function() {
            var self = this;
            
            console.log('PS Chat: Showing user settings popup menu');
            
            // Toggle behavior: if menu exists, remove it
            var existingMenu = $('.psource-chat-settings-menu');
            if (existingMenu.length) {
                existingMenu.remove();
                $(document).off('click.settingsOutside change.settingsMenu');
                return;
            }
            
            // Remove any other menus first
            $('.psource-chat-moderation-menu, .psource-chat-emoji-picker').remove();
            
            // Create compact settings menu
            var menuHtml = 
                '<div class="psource-chat-settings-menu">' +
                '<div class="settings-menu-header">Chat-Einstellungen</div>' +
                '<div class="settings-menu-item">' +
                '<label>Sound:</label>' +
                '<select name="enable_sound" class="settings-select">' +
                '<option value="yes">An</option>' +
                '<option value="no">Aus</option>' +
                '</select>' +
                '</div>' +
                '<div class="settings-menu-item">' +
                '<label>Benachrichtigungen:</label>' +
                '<select name="enable_notifications" class="settings-select">' +
                '<option value="yes">An</option>' +
                '<option value="no">Aus</option>' +
                '</select>' +
                '</div>' +
                '<div class="settings-menu-item">' +
                '<label>Auto-Öffnen:</label>' +
                '<select name="auto_open" class="settings-select">' +
                '<option value="yes">An</option>' +
                '<option value="no">Aus</option>' +
                '</select>' +
                '</div>' +
                '</div>';
            
            // Add menu to body for better positioning
            $('body').append(menuHtml);
            
            // Position menu relative to settings button
            var btn = this.container.find('.psource-chat-settings-btn');
            var menu = $('.psource-chat-settings-menu');
            
            if (btn.length && menu.length) {
                var btnOffset = btn.offset();
                var btnHeight = btn.outerHeight();
                var btnWidth = btn.outerWidth();
                
                menu.css({
                    position: 'fixed',
                    top: (btnOffset.top + btnHeight + 5) + 'px',
                    left: (btnOffset.left - menu.outerWidth() + btnWidth) + 'px',
                    'z-index': '1000001',
                    display: 'block'
                });
                
                console.log('PS Chat: Positioned settings menu at', btnOffset.top + btnHeight + 5, btnOffset.left - menu.outerWidth() + btnWidth);
            }
            
            // Load current settings
            this.loadUserSettingsInMenu();
            
            // Bind change events with unique namespace  
            $(document).off('change.settingsMenu').on('change.settingsMenu', '.psource-chat-settings-menu .settings-select', function(e) {
                e.preventDefault();
                e.stopPropagation();
                var name = $(this).attr('name');
                var value = $(this).val();
                self.saveUserSetting(name, value);
                console.log('PS Chat: Setting changed:', name, '=', value);
            });
            
            // Hide menu when clicking outside - use timeout to prevent immediate close
            setTimeout(function() {
                $(document).off('click.settingsOutside').on('click.settingsOutside', function(e) {
                    if (!$(e.target).closest('.psource-chat-settings-menu, .psource-chat-settings-btn').length) {
                        $('.psource-chat-settings-menu').remove();
                        $(document).off('click.settingsOutside change.settingsMenu');
                        console.log('PS Chat: Settings menu closed by outside click');
                    }
                });
            }, 100);
        },
        
        /**
         * Load user settings into compact menu
         */
        loadUserSettingsInMenu: function() {
            var settings = this.getUserSettings();
            $('.psource-chat-settings-menu select[name="enable_sound"]').val(settings.enable_sound);
            $('.psource-chat-settings-menu select[name="enable_notifications"]').val(settings.enable_notifications);
            $('.psource-chat-settings-menu select[name="auto_open"]').val(settings.auto_open);
        },
        
        /**
         * Show moderation menu
         */
        showModerationMenu: function() {
            var self = this;
            
            console.log('PS Chat: Showing moderation menu');
            
            // Toggle behavior: if menu exists, remove it
            var existingMenu = $('.psource-chat-moderation-menu');
            if (existingMenu.length) {
                existingMenu.remove();
                $(document).off('click.moderationMenu click.moderationOutside');
                return;
            }
            
            // Remove any other menus first
            $('.psource-chat-settings-menu, .psource-chat-emoji-picker').remove();
            
            var menuHtml = '<div class="psource-chat-moderation-menu">';
            menuHtml += '<div class="moderation-menu-header">Moderation</div>';
            
            var moderationActions = [
                { action: 'clear_messages', label: 'Alle Nachrichten löschen', confirm: 'Alle Nachrichten löschen?' },
                { action: 'ban_user', label: 'Benutzer sperren', prompt: 'Benutzername:' },
                { action: 'unban_user', label: 'Sperre aufheben', prompt: 'Benutzername:' },
                { action: 'set_message', label: 'System-Nachricht', prompt: 'Nachricht:' }
            ];
            
            moderationActions.forEach(function(item) {
                menuHtml += '<div class="moderation-menu-item" data-action="' + item.action + '"';
                if (item.confirm) menuHtml += ' data-confirm="' + item.confirm + '"';
                if (item.prompt) menuHtml += ' data-prompt="' + item.prompt + '"';
                menuHtml += '>' + item.label + '</div>';
            });
            menuHtml += '</div>';
            
            // Add menu to body for better positioning
            $('body').append(menuHtml);
            
            // Position menu relative to moderation button
            var btn = this.container.find('.psource-chat-moderate-btn');
            var menu = $('.psource-chat-moderation-menu');
            
            if (btn.length && menu.length) {
                var btnOffset = btn.offset();
                var btnHeight = btn.outerHeight();
                var btnWidth = btn.outerWidth();
                
                menu.css({
                    position: 'fixed',
                    top: (btnOffset.top + btnHeight + 5) + 'px',
                    left: (btnOffset.left - menu.outerWidth() + btnWidth) + 'px',
                    'z-index': '1000001',
                    display: 'block'
                });
                
                console.log('PS Chat: Positioned moderation menu at', btnOffset.top + btnHeight + 5, btnOffset.left - menu.outerWidth() + btnWidth);
            }
            
            // Bind menu events with unique namespaces
            $(document).off('click.moderationMenu').on('click.moderationMenu', '.psource-chat-moderation-menu .moderation-menu-item', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                var action = $(this).data('action');
                var confirmText = $(this).data('confirm');
                var promptText = $(this).data('prompt');
                
                console.log('PS Chat: Moderation action clicked:', action);
                
                // Handle confirmation or prompt
                var proceed = true;
                var userInput = null;
                
                if (confirmText) {
                    proceed = confirm(confirmText);
                } else if (promptText) {
                    userInput = prompt(promptText);
                    proceed = (userInput !== null && userInput.trim() !== '');
                }
                
                if (proceed) {
                    self.executeModerationAction(action, userInput);
                }
                
                // Remove menu
                $('.psource-chat-moderation-menu').remove();
                $(document).off('click.moderationMenu click.moderationOutside');
            });
            
            // Hide menu when clicking outside - use timeout to prevent immediate close
            setTimeout(function() {
                $(document).off('click.moderationOutside').on('click.moderationOutside', function(e) {
                    if (!$(e.target).closest('.psource-chat-moderation-menu, .psource-chat-moderate-btn').length) {
                        $('.psource-chat-moderation-menu').remove();
                        $(document).off('click.moderationOutside click.moderationMenu');
                    }
                });
            }, 100);
        },
        
        /**
         * Execute moderation action
         */
        executeModerationAction: function(action, userInput) {
            var self = this;
            
            console.log('PS Chat: Executing moderation action:', action, userInput);
            
            this.ajaxRequest('moderate_chat', {
                action: action,
                data: userInput || ''
            }, function(response) {
                if (response.success) {
                    console.log('PS Chat: Moderation action successful');
                    if (action === 'clear_messages') {
                        self.container.find('.psource-chat-messages').empty();
                    }
                    self.loadMessages(); // Refresh messages
                } else {
                    console.error('PS Chat: Moderation action failed:', response);
                    alert('Aktion fehlgeschlagen: ' + (response.data || 'Unbekannter Fehler'));
                }
            });
        },
        
        /**
         * Get user settings
         */
        getUserSettings: function() {
            try {
                var settings = localStorage.getItem('psource_chat_user_settings');
                return settings ? JSON.parse(settings) : {
                    enable_sound: 'yes',
                    enable_notifications: 'yes',
                    auto_open: 'no'
                };
            } catch (e) {
                return {
                    enable_sound: 'yes',
                    enable_notifications: 'yes',
                    auto_open: 'no'
                };
            }
        },
        
        /**
         * Save user setting
         */
        saveUserSetting: function(name, value) {
            try {
                var settings = this.getUserSettings();
                settings[name] = value;
                localStorage.setItem('psource_chat_user_settings', JSON.stringify(settings));
                console.log('PS Chat: User setting saved:', name, '=', value);
            } catch (e) {
                console.warn('PS Chat: Could not save user setting:', e);
            }
        },
        
        /**
         * Set guest name
         */
        setGuestName: function(name) {
            // Store guest name in session/cookie
            if (typeof Storage !== 'undefined') {
                localStorage.setItem('psource_chat_guest_name', name);
            }
        },
        
        /**
         * Format message for display
         */
        formatMessage: function(message) {
            var timestamp = new Date(message.timestamp * 1000).toLocaleTimeString();
            var userName = message.user_name || 'Gast';
            var messageText = this.escapeHtml(message.message);
            
            return '<div class="chat-message" data-message-id="' + message.id + '">' +
                '<span class="message-time">' + timestamp + '</span> ' +
                '<span class="message-user">' + userName + ':</span> ' +
                '<span class="message-text">' + messageText + '</span>' +
                '</div>';
        },
        
        /**
         * Escape HTML entities
         */
        escapeHtml: function(text) {
            var map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        },
        
        /**
         * Get last message ID
         */
        getLastMessageId: function() {
            if (this.messages.length > 0) {
                return this.messages[this.messages.length - 1].id;
            }
            return 0;
        },
        
        /**
         * Update message counter
         */
        updateMessageCounter: function() {
            var counter = this.container.find('.psource-chat-message-counter');
            if (counter.length) {
                counter.text(this.messages.length);
            }
        },
        
        /**
         * Generic AJAX request handler
         */
        ajaxRequest: function(action, data, callback) {
            var requestData = $.extend({
                action: 'psource_chat_' + action,
                nonce: this.settings.nonce
            }, data);
            
            console.log('PS Chat: AJAX Request', action, requestData);
            
            $.ajax({
                url: this.settings.ajax_url,
                type: 'POST',
                data: requestData,
                dataType: 'json',
                success: function(response) {
                    console.log('PS Chat: AJAX Success', action, response);
                    if (callback) callback(response);
                },
                error: function(xhr, status, error) {
                    console.error('PS Chat: AJAX Error', action, status, error);
                    if (callback) callback({ success: false, error: error });
                }
            });
        }
    };
    
    // Auto-initialize when DOM is ready
    $(document).ready(function() {
        // Only initialize if chat container exists
        if ($('#psource-chat').length > 0) {
            console.log('PS Chat: DOM ready, initializing...');
            window.PSSourceChat.init();
        }
    });
    
})(jQuery);
            // 1. Saved state from localStorage (user's last choice)
            // 2. PHP class from server
            // 3. Settings initial_state
            var hasMinimizedClass = this.container.hasClass('minimized');
            
            if (savedState !== null) {
                // Use saved state (user's last choice)
                this.minimized = savedState;
                console.log('PS Chat: Using saved state:', this.minimized);
            } else if (hasMinimizedClass) {
                // Use PHP class from server
                this.minimized = true;
                console.log('PS Chat: Using PHP minimized class');
            } else {
                // Use settings initial_state
                this.minimized = (this.settings.initial_state === 'minimized');
                console.log('PS Chat: Using settings initial_state:', this.settings.initial_state);
            }
            
            // Apply the determined state to both CSS and internal state
            this.container.toggleClass('minimized', this.minimized);
            console.log('PS Chat: Applied initial state - minimized:', this.minimized);
            
            this.bindEvents();
            this.setupChat();
            this.startUpdateLoop();
            this.monitorMinimizeIcon(); // Start icon monitoring
            
            // Set initial icon after everything is set up
            setTimeout(function() {
                this.updateMinimizeIcon();
            }.bind(this), 100);
            
            this.initialized = true;
            console.log('PSSource Chat initialized with state:', this.minimized ? 'minimized' : 'maximized');
        },
        
        /**
         * Bind all event handlers
         */
        bindEvents: function() {
            var self = this;
            
            console.log('PS Chat: Binding events to container:', this.container);
            
            // Header click to toggle
            this.container.find('.psource-chat-header').on('click', function(e) {
                console.log('PS Chat: Header clicked');
                if (!$(e.target).hasClass('psource-chat-btn') && !$(e.target).closest('.psource-chat-btn').length) {
                    self.toggleMinimize();
                }
            });
            
            // Minimize button - Use event delegation for better reliability
            $(document).on('click', '#' + this.settings.container_id + ' .psource-chat-minimize', function(e) {
                console.log('PS Chat: Minimize button clicked');
                e.stopPropagation();
                e.preventDefault();
                
                // Make sure icon stays visible during state change
                var btn = $(this);
                btn.css({
                    'display': 'inline-block',
                    'visibility': 'visible',
                    'opacity': '1'
                });
                
                self.toggleMinimize();
                
                // Ensure icon stays visible after toggle
                setTimeout(function() {
                    btn.css({
                        'display': 'inline-block',
                        'visibility': 'visible',
                        'opacity': '1'
                    });
                }, 50);
            });
            
            // Close button
            $(document).on('click', '#' + this.settings.container_id + ' .psource-chat-close', function(e) {
                console.log('PS Chat: Close button clicked');
                e.stopPropagation();
                e.preventDefault();
                self.closeChat();
            });
            
            // Settings button - use multiple selectors for reliability
            $(document).on('click', '#' + this.settings.container_id + ' .psource-chat-settings-btn, .psource-chat-settings-btn', function(e) {
                console.log('PS Chat: Settings button clicked');
                e.stopPropagation();
                e.preventDefault();
                self.showUserSettings();
            });
            
            // Moderation button - use multiple selectors for reliability
            $(document).on('click', '#' + this.settings.container_id + ' .psource-chat-moderate-btn, .psource-chat-moderate-btn', function(e) {
                console.log('PS Chat: Moderation button clicked');
                e.stopPropagation();
                e.preventDefault();
                self.showModerationTools();
            });
            
            // Send message
            $(document).on('click', '#' + this.settings.container_id + ' .psource-chat-send-btn', function(e) {
                e.preventDefault();
                self.sendMessage();
            });
            
            // Input handling
            this.container.find('.psource-chat-input').on('keydown', function(e) {
                if (e.which === 13 && !e.shiftKey) {
                    e.preventDefault();
                    self.sendMessage();
                }
            }).on('input', function() {
                self.handleTyping();
                self.updateCharacterCount();
            });
            
            // Emoji button - use multiple selectors for reliability
            $(document).on('click', '#' + this.settings.container_id + ' .psource-chat-emoji-btn, .psource-chat-emoji-btn', function(e) {
                console.log('PS Chat: Emoji button clicked');
                e.preventDefault();
                e.stopPropagation();
                self.toggleEmojiPicker();
            });
            
            // Emoji picker clicks - always bind
            $(document).on('click', '.psource-chat-emoji-picker .emoji-btn', function(e) {
                console.log('PS Chat: Emoji selected:', $(this).data('emoji'));
                e.preventDefault();
                var emoji = $(this).data('emoji');
                self.insertEmoji(emoji);
                $('.psource-chat-emoji-picker').fadeOut(200);
            });
            
            // Emoji category tabs - always bind
            $(document).on('click', '.psource-chat-emoji-picker .emoji-tab', function(e) {
                console.log('PS Chat: Emoji category selected:', $(this).data('category'));
                e.preventDefault();
                var category = $(this).data('category');
                self.switchEmojiCategory(category);
            });
            
            // GIF search
            $(document).on('click', '.psource-chat-emoji-picker .gif-search-btn', function() {
                var query = $('.gif-search-input').val();
                self.searchGifs(query);
            });
            
            $(document).on('keypress', '.psource-chat-emoji-picker .gif-search-input', function(e) {
                if (e.which === 13) {
                    var query = $(this).val();
                    self.searchGifs(query);
                }
            });
            
            // GIF selection
            $(document).on('click', '.psource-chat-emoji-picker .gif-item', function() {
                var gifUrl = $(this).data('gif-url');
                self.insertGif(gifUrl);
            });
            
            // Guest name handling
            this.container.find('.psource-chat-guest-name').on('change', function() {
                self.setGuestName($(this).val());
            });
        },
        
        /**
         * Setup chat interface
         */
        setupChat: function() {
            // FORCE FIXED POSITIONING - Override any theme interference
            this.forceFixedPositioning();
            
            // Apply initial minimized state first - this is critical!
            this.container.toggleClass('minimized', this.minimized);
            console.log('PS Chat: Applied minimized state in setupChat:', this.minimized);
            
            // Force height based on minimized state
            if (this.minimized) {
                this.container.css('height', '50px');
                console.log('PS Chat: Set minimized height');
            } else {
                this.container.css('height', 'auto');
                this.container.css('max-height', this.settings.height + 'px');
                console.log('PS Chat: Set maximized height');
            }
            
            // Apply position
            this.container.removeClass('psource-chat-bottom-right psource-chat-bottom-left psource-chat-top-right psource-chat-top-left');
            this.container.addClass('psource-chat-' + this.settings.position);
            
            // Set dimensions
            this.container.css({
                'width': this.settings.width + 'px'
            });
            
            // Update title
            this.container.find('.psource-chat-title').text(this.settings.title);
            
            // Set correct initial icon based on minimized state
            this.updateMinimizeIcon();
            
            // Initialize message area
            var welcomeMessage = this.container.find('.psource-chat-welcome');
            if (welcomeMessage.length === 0) {
                this.container.find('.psource-chat-messages').html(
                    '<div class="psource-chat-welcome">' +
                    '<h4>Willkommen im Chat!</h4>' +
                    '<p>Starte eine Unterhaltung, indem Du eine Nachricht unten eingibst.</p>' +
                    '</div>'
                );
            }
            
            // Load initial data
            this.loadMessages();
            this.loadActiveUsers();
            
            // Re-force positioning after a brief delay (in case theme JS interferes)
            setTimeout(function() {
                this.forceFixedPositioning();
            }.bind(this), 1000);
        },
        
        /**
         * Force fixed positioning to override theme interference
         */
        forceFixedPositioning: function() {
            if (!this.container || !this.container.length) return;
            
            // Force CSS properties that might get overridden
            this.container.css({
                'position': 'fixed',
                'z-index': '999999',
                'transform': 'none',
                'will-change': 'auto',
                'margin': '0',
                'padding': '0',
                'float': 'none',
                'clear': 'none',
                'display': 'block'
            });
            
            // Force position based on setting
            var position = this.settings.position || 'bottom-right';
            var positions = {
                'bottom-right': { bottom: '20px', right: '20px', top: 'auto', left: 'auto' },
                'bottom-left': { bottom: '20px', left: '20px', top: 'auto', right: 'auto' },
                'top-right': { top: '20px', right: '20px', bottom: 'auto', left: 'auto' },
                'top-left': { top: '20px', left: '20px', bottom: 'auto', right: 'auto' }
            };
            
            if (positions[position]) {
                this.container.css(positions[position]);
            }
            
            // Debug log
            console.log('PS Chat: Forced positioning to', position, this.container.css(['position', 'top', 'right', 'bottom', 'left', 'z-index']));
        },
        
        /**
         * Update minimize button icon
         */
        updateMinimizeIcon: function() {
            var minimizeBtn = this.container.find('.psource-chat-minimize');
            
            if (!minimizeBtn.length) {
                console.log('PS Chat: Minimize button not found!');
                return;
            }
            
            var svg = minimizeBtn.find('svg');
            
            if (!svg.length) {
                console.log('PS Chat: SVG not found, creating new one');
                // Create SVG if it doesn't exist
                svg = $('<svg width="16" height="16" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"></svg>');
                minimizeBtn.empty().append(svg);
            }
            
            // Always ensure SVG has correct attributes
            svg.attr({
                'width': '16',
                'height': '16',
                'viewBox': '0 0 24 24',
                'xmlns': 'http://www.w3.org/2000/svg'
            });
            
            if (this.minimized) {
                // Minimized - show expand icon (arrow up)
                svg.html('<path d="M7 14l5-5 5 5H7z" fill="currentColor"/>');
                minimizeBtn.attr('title', 'Maximieren');
                minimizeBtn.removeClass('minimize-state').addClass('expand-state');
                console.log('PS Chat: Set icon to EXPAND (minimized state)');
            } else {
                // Maximized - show minimize icon (line)
                svg.html('<path d="M19 13H5v-2h14v2z" fill="currentColor"/>');
                minimizeBtn.attr('title', 'Minimieren');
                minimizeBtn.removeClass('expand-state').addClass('minimize-state');
                console.log('PS Chat: Set icon to MINIMIZE (maximized state)');
            }
            
            // Force visibility
            minimizeBtn.css({
                'display': 'inline-block',
                'visibility': 'visible',
                'opacity': '1'
            });
            
            console.log('PS Chat: Icon updated, button classes:', minimizeBtn.attr('class'));
        },
        
        /**
         * Toggle minimize state
         */
        toggleMinimize: function() {
            console.log('PS Chat: toggleMinimize called, current state:', this.minimized);
            
            // Toggle state
            this.minimized = !this.minimized;
            
            // Update container class
            this.container.toggleClass('minimized', this.minimized);
            
            console.log('PS Chat: New minimized state:', this.minimized);
            console.log('PS Chat: Container classes:', this.container.attr('class'));
            
            // Force immediate visual change
            if (this.minimized) {
                this.container.addClass('minimized');
                this.container.css('height', '50px');
                console.log('PS Chat: Applied minimized styles');
            } else {
                this.container.removeClass('minimized');
                this.container.css('height', 'auto');
                this.container.css('max-height', this.settings.height + 'px');
                console.log('PS Chat: Applied maximized styles');
            }
            
            // Update the icon with a slight delay to ensure DOM is ready
            setTimeout(function() {
                this.updateMinimizeIcon();
            }.bind(this), 10);
            
            // Also update again after a longer delay to handle any interference
            setTimeout(function() {
                this.updateMinimizeIcon();
            }.bind(this), 100);
            
            // Save state
            this.saveState();
            
            // Force positioning to ensure chat stays in place
            this.forceFixedPositioning();
        },
        
        /**
         * Close chat
         */
        closeChat: function() {
            if (confirm('Chat wirklich schließen?')) {
                this.container.fadeOut(300);
                this.stopUpdateLoop();
            }
        },
        
        /**
         * Send message
         */
        sendMessage: function() {
            var input = this.container.find('.psource-chat-input');
            var message = input.val().trim();
            
            if (!message) return;
            
            // Check guest name if required
            if (!this.settings.user_id && this.settings.allow_guest_chat) {
                var guestName = this.container.find('.psource-chat-guest-name').val().trim();
                if (!guestName) {
                    alert('Bitte gib Deinen Namen ein.');
                    this.container.find('.psource-chat-guest-name').focus();
                    return;
                }
            }
            
            // Clear input
            input.val('');
            this.updateCharacterCount();
            
            console.log('PS Chat: Sending message:', message);
            
            // Send via AJAX
            this.ajaxRequest('send_message', {
                message: message,
                guest_name: this.container.find('.psource-chat-guest-name').val() || ''
            }, function(response) {
                console.log('PS Chat: Send message response:', response);
                
                if (response && response.success) {
                    // Message will be loaded in next update
                    console.log('PS Chat: Message sent successfully');
                    this.loadMessages();
                } else {
                    var errorMsg = 'Unbekannter Fehler';
                    if (response && response.error) {
                        errorMsg = response.error;
                    } else if (response && response.data) {
                        errorMsg = response.data;
                    }
                    
                    console.error('PS Chat: Send message failed:', errorMsg);
                    alert('Fehler beim Senden: ' + errorMsg);
                    input.val(message); // Restore message
                }
            }.bind(this));
        },
        
        /**
         * Load messages
         */
        loadMessages: function() {
            console.log('PS Chat: Loading messages...');
            
            this.ajaxRequest('get_messages', {
                last_message_id: this.getLastMessageTime(),
                type: 'public'
            }, function(response) {
                console.log('PS Chat: Load messages response:', response);
                
                if (response && response.success && response.data && response.data.messages) {
                    console.log('PS Chat: Found', response.data.messages.length, 'messages');
                    if (response.data.messages.length > 0) {
                        this.displayMessages(response.data.messages);
                    }
                } else {
                    console.log('PS Chat: No messages found or error:', response);
                }
            }.bind(this));
        },
        
        /**
         * Load active users
         */
        loadActiveUsers: function() {
            this.ajaxRequest('get_users', {}, function(response) {
                console.log('PS Chat: Load users response:', response);
                if (response.success) {
                    // Handle both response.data.users and response.users formats
                    var users = response.data?.users || response.users || [];
                    this.displayUsers(users);
                } else {
                    console.log('PS Chat: Failed to load users:', response);
                }
            }.bind(this));
        },
        
        /**
         * Display messages
         */
        displayMessages: function(messages) {
            if (!messages || !messages.length) {
                console.log('PS Chat: No messages to display');
                return;
            }
            
            console.log('PS Chat: Displaying', messages.length, 'messages');
            
            var messagesContainer = this.container.find('.psource-chat-messages');
            var hadWelcome = messagesContainer.find('.psource-chat-welcome').length > 0;
            
            // Remove welcome message on first real message
            if (hadWelcome) {
                console.log('PS Chat: Removing welcome message');
                messagesContainer.find('.psource-chat-welcome').remove();
            }
            
            var hasNewMessages = false;
            
            messages.forEach(function(message, index) {
                console.log('PS Chat: Adding message', index + 1, ':', message);
                var isNew = this.addMessageToDisplay(message);
                if (isNew) hasNewMessages = true;
            }.bind(this));
            
            this.scrollToBottom();
            
            // Update message count
            this.updateMessageCount();
            
            // Handle new message notifications
            if (hasNewMessages) {
                // Show notification indicator
                this.showNotificationIndicator();
                
                // Auto-open if enabled and minimized
                if (this.autoOpenEnabled && this.minimized) {
                    console.log('PS Chat: Auto-opening due to new message');
                    this.toggleMinimize();
                }
                
                // Play sound for new messages
                if (this.soundEnabled && this.settings.enable_sound) {
                    this.playSound();
                }
            }
        },
        
        /**
         * Add single message to display
         */
        addMessageToDisplay: function(message) {
            var messagesContainer = this.container.find('.psource-chat-messages');
            var isOwnMessage = (message.user_id == this.settings.user_id && this.settings.user_id > 0);
            
            // Check if message already exists
            var existingMessage = messagesContainer.find('[data-message-id="' + message.id + '"]');
            if (existingMessage.length > 0) {
                console.log('PS Chat: Message', message.id, 'already exists, skipping');
                return false;
            }
            
            console.log('PS Chat: Adding message', message.id, 'from', message.user_name);
            
            var messageHtml = 
                '<div class="psource-chat-message' + (isOwnMessage ? ' own' : '') + '" data-message-id="' + message.id + '">' +
                '<div class="psource-chat-avatar">' +
                '<img src="' + (message.user_avatar || this.getDefaultAvatar()) + '" alt="Avatar" />' +
                '</div>' +
                '<div class="psource-chat-message-content">' +
                '<div class="psource-chat-message-header">' +
                '<span class="psource-chat-username">' + this.escapeHtml(message.user_name) + '</span>' +
                '<span class="psource-chat-timestamp">' + (message.formatted_time || this.formatTime(message.timestamp)) + '</span>' +
                '</div>' +
                '<div class="psource-chat-message-text">' + this.formatMessage(message.message) + '</div>' +
                '</div>' +
                '</div>';
            
            messagesContainer.append(messageHtml);
            console.log('PS Chat: Message HTML added to DOM');
            
            // Limit messages to prevent memory issues
            var messages = messagesContainer.find('.psource-chat-message');
            if (messages.length > 50) {
                messages.first().remove();
            }
            
            return true; // Return true to indicate this was a new message
        },
        
        /**
         * Display users
         */
        displayUsers: function(users) {
            var usersList = this.container.find('.psource-chat-user-list');
            usersList.empty();
            
            if (!users || !users.length) {
                usersList.html('<span class="no-users">Keine Benutzer online</span>');
                return;
            }
            
            users.forEach(function(user) {
                var userHtml = 
                    '<div class="psource-chat-user" data-user-id="' + user.id + '">' +
                    '<img class="psource-chat-user-avatar" src="' + (user.avatar || this.getDefaultAvatar()) + '" alt="Avatar" />' +
                    '<span class="psource-chat-user-name">' + this.escapeHtml(user.name) + '</span>' +
                    '<span class="psource-chat-user-status"></span>' +
                    '</div>';
                usersList.append(userHtml);
            }.bind(this));
            
            this.userList = users;
        },
        
        /**
         * Handle typing indicator
         */
        handleTyping: function() {
            if (this.typingTimer) {
                clearTimeout(this.typingTimer);
            }
            
            if (!this.isTyping) {
                this.isTyping = true;
                this.sendTypingIndicator(true);
            }
            
            this.typingTimer = setTimeout(function() {
                this.isTyping = false;
                this.sendTypingIndicator(false);
            }.bind(this), 3000);
        },
        
        /**
         * Send typing indicator
         */
        sendTypingIndicator: function(typing) {
            this.ajaxRequest('typing', {
                typing: typing
            }, function(response) {
                // Handle response if needed
            });
        },
        
        /**
         * Toggle emoji picker
         */
        toggleEmojiPicker: function() {
            console.log('PS Chat: Toggle emoji picker called');
            
            // Toggle behavior: if picker exists, remove it
            var existingPicker = $('.psource-chat-emoji-picker');
            if (existingPicker.length) {
                existingPicker.fadeOut(200, function() {
                    $(this).remove();
                });
                $(document).off('click.emojiOutside');
                return;
            }
            
            // Remove any other menus first
            $('.psource-chat-settings-menu, .psource-chat-moderation-menu').remove();
            
            // Create picker if it doesn't exist
            if ($('.psource-chat-emoji-picker').length === 0) {
                console.log('PS Chat: Creating new emoji picker');
                this.createEmojiPicker();
            }
            
            var picker = $('.psource-chat-emoji-picker');
            console.log('PS Chat: Found emoji picker elements:', picker.length);
            
            if (picker.length === 0) {
                console.error('PS Chat: Failed to create emoji picker');
                return;
            }
            
            console.log('PS Chat: Showing emoji picker');
            
            // Position picker relative to chat container
            var container = this.container;
            var emojiBtn = container.find('.psource-chat-emoji-btn');
            
            if (emojiBtn.length === 0) {
                console.error('PS Chat: Emoji button not found for positioning');
                return;
            }
            
            // Calculate position relative to the emoji button
            var btnOffset = emojiBtn.offset();
            var containerOffset = container.offset();
            var windowWidth = $(window).width();
            var windowHeight = $(window).height();
            
            // Default position: above the input area, aligned with emoji button
            var pickerWidth = 300;
            var pickerHeight = 250;
            
            var left = btnOffset.left;
            var bottom = windowHeight - btnOffset.top + 10; // Above the button
            
            // Adjust if picker would go off-screen
            if (left + pickerWidth > windowWidth) {
                left = windowWidth - pickerWidth - 20;
            }
            if (left < 20) {
                left = 20;
            }
            
            // If there's not enough space above, show below
            if (bottom + pickerHeight > windowHeight - 20) {
                bottom = windowHeight - btnOffset.top - emojiBtn.outerHeight() - pickerHeight - 10;
            }
            
            picker.css({
                'position': 'fixed',
                'left': left + 'px',
                'bottom': bottom + 'px',
                'z-index': '1000001'
            });
            
            picker.fadeIn(200);
            console.log('PS Chat: Emoji picker positioned and shown');
            
            // Initialize first category
            this.switchEmojiCategory('smileys');
            
            // Hide menu when clicking outside - use timeout to prevent immediate close
            setTimeout(function() {
                $(document).off('click.emojiOutside').on('click.emojiOutside', function(e) {
                    if (!$(e.target).closest('.psource-chat-emoji-picker, .psource-chat-emoji-btn').length) {
                        $('.psource-chat-emoji-picker').fadeOut(200, function() {
                            $(this).remove();
                        });
                });     $(document).off('click.emojiOutside');
                $(document).off('click.emojiOutside');
                return;
            }, 100);
            
            // Remove any other menus first
            $('.psource-chat-settings-menu, .psource-chat-moderation-menu').remove();
            reate emoji picker if it doesn't exist
            // Create picker if it doesn't exist
            if ($('.psource-chat-emoji-picker').length === 0) {
                console.log('PS Chat: Creating new emoji picker');;
                this.createEmojiPicker();
            }ar pickerHtml = 
                '<div class="psource-chat-emoji-picker" style="display: none;">' +
            var picker = $('.psource-chat-emoji-picker');
            console.log('PS Chat: Found emoji picker elements:', picker.length);tton>' +
                '<button class="emoji-tab" data-category="gestures">👍</button>' +
            if (picker.length === 0) {tab" data-category="nature">🐶</button>' +
                console.error('PS Chat: Failed to create emoji picker');on>' +
                return;' +
            }   '<div class="emoji-picker-content">' +
                '<div class="emoji-category" data-category="smileys">' +
            console.log('PS Chat: Showing emoji picker');😁','😆','😅','😂','🤣','😊','😇','🙂','🙃','😉','😌','😍','🥰','😘','😗','😙','😚','😋','😛','😝','😜','🤪','🤨','🧐','🤓','😎','🤩','🥳','😏','😒','😞','😔','😟','😕','🙁','☹️','😣','😖','😫','😩','🥺','😢','😭','😤','😠','😡','🤬','🤯','😳','🥵','🥶','😱','😨','😰','😥','😓','🤗','🤔','🤭','🤫','🤥','😶','😐','😑','😬','🙄','😯','😦','😧','😮','😲','🥱','😴','🤤','😪','😵','🤐','🥴','🤢','🤮','🤧','😷','🤒','🤕']) +
                '</div>' +
            // Position picker relative to chat containery="gestures" style="display:none;">' +
            var container = this.container;','👎','👌','🤏','✌️','🤞','🤟','🤘','🤙','👈','👉','👆','👇','☝️','👋','🤚','🖐️','✋','🖖','👏','🤲','🙏','✍️','�','🤳','�💪','�','�🦵','�','�🦶']) +
            var emojiBtn = container.find('.psource-chat-emoji-btn');
                '<div class="emoji-category" data-category="nature" style="display:none;">' +
            if (emojiBtn.length === 0) {['🐶','🐱','🐭','🐹','🐰','🦊','🐻','🐼','🐨','🐯','🦁','🐮','🐷','🐽','🐸','🐵','🙈','🙉','🙊','🐒','🐔','🐧','🐦','🐤','🐣','🐥','🦆','🦅','🦉','🦇','🐺','🐗','🐴','🦄','🐝','🐛','🦋','🐌','🐞','🐜','🦟','🦗','🕷️','🦂','🐢','🐍','🦎','🦖','🦕','🐙','🦑','🦐','🦞','🦀','🐡','🐠','🐟','🐬','🐳','🐋','🦈']) +
                console.error('PS Chat: Emoji button not found for positioning');
                return;lass="emoji-category" data-category="food" style="display:none;">' +
            }   this.createEmojiButtons(['🍎','🍊','🍋','🍌','🍉','🍇','🍓','🫐','🍈','🍒','🍑','🥭','🍍','🥥','🥝','🍅','🍆','🥑','🥦','🥬','🥒','🌶️','🫑','🌽','🥕','🫒','🧄','🧅','🥔','🍠','🥐','🥯','🍞','🥖','🥨','🧀','🥚','🍳','🧈','🥞','🧇','🥓','🥩','🍗','🍖','🦴','🌭','🍔','🍟','🍕']) +
                '</div>' +
            // Calculate position relative to the emoji button
            var btnOffset = emojiBtn.offset();
            var containerOffset = container.offset();
            var windowWidth = $(window).width();
            var windowHeight = $(window).height();ated');
            
            // Default position: above the input area, aligned with emoji button
            var pickerWidth = 300;ents();
            var pickerHeight = 250;
            
            var left = btnOffset.left;
            var bottom = windowHeight - btnOffset.top + 10; // Above the button
            
            // Adjust if picker would go off-screen
            if (left + pickerWidth > windowWidth) {
                left = windowWidth - pickerWidth - 20;
            }   html += '<span class="emoji-btn" data-emoji="' + emoji + '">' + emoji + '</span>';
            if (left < 20) {
                left = 20;
            }
            
            // If there's not enough space above, show below
            if (bottom + pickerHeight > windowHeight - 20) {
                bottom = windowHeight - btnOffset.top - emojiBtn.outerHeight() - pickerHeight - 10;
            }mojiPickerEvents: function() {
            var self = this;
            picker.css({
                'position': 'fixed',nding emoji picker events');
                'left': left + 'px',
                'bottom': bottom + 'px', namespace and ensure events are clean
                'z-index': '1000001'mojiPicker').on('click.emojiPicker', '.psource-chat-emoji-picker .emoji-btn', function(e) {
            }); e.preventDefault();
                e.stopPropagation();
            picker.fadeIn(200);his).data('emoji');
            console.log('PS Chat: Emoji picker positioned and shown');
                self.insertEmoji(emoji);
            // Initialize first categoryicker').fadeOut(200, function() {
            this.switchEmojiCategory('smileys');
                });
            // Hide menu when clicking outside - use timeout to prevent immediate close
            setTimeout(function() {
                $(document).off('click.emojiOutside').on('click.emojiOutside', function(e) {
                    if (!$(e.target).closest('.psource-chat-emoji-picker, .psource-chat-emoji-btn').length) {
                        $('.psource-chat-emoji-picker').fadeOut(200, function() {at-emoji-picker .emoji-tab', function(e) {
                            $(this).remove();
                        });gation();
                        $(document).off('click.emojiOutside');
                    }le.log('PS Chat: Emoji category selected:', category);
                });f.switchEmojiCategory(category);
            }, 100);
        },
        
        /**
         * Create emoji picker if it doesn't exist
         */
        createEmojiPicker: function() {
            if ($('.psource-chat-emoji-picker').length > 0) return;0];
            var start = input.selectionStart;
            var pickerHtml = electionEnd;
                '<div class="psource-chat-emoji-picker" style="display: none;">' +
                '<div class="emoji-picker-tabs">' +
                '<button class="emoji-tab active" data-category="smileys">😊</button>' +
                '<button class="emoji-tab" data-category="gestures">👍</button>' +
                '<button class="emoji-tab" data-category="nature">🐶</button>' +
                '<button class="emoji-tab" data-category="food">🍎</button>' +
                '</div>' +at-emoji-picker').hide();
                '<div class="emoji-picker-content">' +
                '<div class="emoji-category" data-category="smileys">' +
                this.createEmojiButtons(['😀','😃','😄','😁','😆','😅','😂','🤣','😊','😇','🙂','🙃','😉','😌','😍','🥰','😘','😗','😙','😚','😋','😛','😝','😜','🤪','🤨','🧐','🤓','😎','🤩','🥳','😏','😒','😞','😔','😟','😕','🙁','☹️','😣','😖','😫','😩','🥺','😢','😭','😤','😠','😡','🤬','🤯','😳','🥵','🥶','😱','😨','😰','😥','😓','🤗','🤔','🤭','🤫','🤥','😶','😐','😑','😬','🙄','😯','😦','😧','😮','😲','🥱','😴','🤤','😪','😵','🤐','🥴','🤢','🤮','🤧','😷','🤒','🤕']) +
                '</div>' +
                '<div class="emoji-category" data-category="gestures" style="display:none;">' +
                this.createEmojiButtons(['👍','👎','👌','🤏','✌️','🤞','🤟','🤘','🤙','👈','👉','👆','👇','☝️','👋','🤚','🖐️','✋','🖖','👏','🤲','🙏','✍️','�','🤳','�💪','�','�🦵','�','�🦶']) +
                '</div>' +nt: function() {
                '<div class="emoji-category" data-category="nature" style="display:none;">' +
                this.createEmojiButtons(['🐶','🐱','🐭','🐹','🐰','🦊','🐻','🐼','🐨','🐯','🦁','🐮','🐷','🐽','🐸','🐵','🙈','🙉','🙊','🐒','🐔','🐧','🐦','🐤','🐣','🐥','🦆','🦅','🦉','🦇','🐺','🐗','🐴','🦄','🐝','🐛','🦋','🐌','🐞','🐜','🦟','🦗','🕷️','🦂','🐢','🐍','🦎','🦖','🦕','🐙','🦑','🦐','🦞','🦀','🐡','🐠','🐟','🐬','🐳','🐋','🦈']) +
                '</div>' +ngth) {
                '<div class="emoji-category" data-category="food" style="display:none;">' +
                this.createEmojiButtons(['🍎','🍊','🍋','🍌','🍉','🍇','🍓','🫐','🍈','🍒','🍑','🥭','🍍','🥥','🥝','🍅','🍆','🥑','🥦','🥬','🥒','🌶️','🫑','🌽','🥕','🫒','🧄','🧅','🥔','🍠','🥐','🥯','🍞','🥖','🥨','🧀','🥚','🍳','🧈','🥞','🧇','🥓','🥩','🍗','🍖','🦴','🌭','🍔','🍟','🍕']) +
                '</div>' +
                '</div>' +
                '</div>';
            tart update loop
            $('body').append(pickerHtml);
            console.log('PS Chat: Emoji picker created');
            if (this.updateTimer) {
            // Bind events for the new pickerr);
            this.bindEmojiPickerEvents();
        },  
            this.updateTimer = setInterval(function() {
        /**     this.loadMessages();
         * Create emoji buttons HTML();
         */ }.bind(this), this.settings.update_interval);
        createEmojiButtons: function(emojis) {
            var html = '';
            emojis.forEach(function(emoji) {
                html += '<span class="emoji-btn" data-emoji="' + emoji + '">' + emoji + '</span>';
            });
            return html;function() {
        },  if (this.updateTimer) {
                clearInterval(this.updateTimer);
        /**     this.updateTimer = null;
         * Bind emoji picker specific events
         */
        bindEmojiPickerEvents: function() {
            var self = this;
            croll to bottom
            console.log('PS Chat: Binding emoji picker events');
            llToBottom: function() {
            // Emoji clicks - Use unique namespace and ensure events are clean
            $(document).off('click.emojiPicker').on('click.emojiPicker', '.psource-chat-emoji-picker .emoji-btn', function(e) {
                e.preventDefault();
                e.stopPropagation();
                var emoji = $(this).data('emoji');
                console.log('PS Chat: Emoji selected:', emoji);
                self.insertEmoji(emoji);
                $('.psource-chat-emoji-picker').fadeOut(200, function() {
                    $(this).remove();ontainer.find('.psource-chat-message').length;
                });nter = this.container.find('.psource-chat-message-count');
                $(document).off('click.emojiOutside');
            }); counter.text(messageCount);
            }
            // Category tabs - Use unique namespaceount to', messageCount);
            $(document).off('click.emojiTabs').on('click.emojiTabs', '.psource-chat-emoji-picker .emoji-tab', function(e) {
                e.preventDefault();
                e.stopPropagation();
                var category = $(this).data('category');
                console.log('PS Chat: Emoji category selected:', category);
                self.switchEmojiCategory(category);
            });(!this.soundEnabled) return;
        },  
            try {
        /**     var audio = new Audio(psource_chat_settings.plugin_url + '/audio/chime.mp3');
         * Insert emoji into input;
         */     audio.play().catch(function() {
        insertEmoji: function(emoji) { restrictions
            var input = this.container.find('.psource-chat-input')[0];
            var start = input.selectionStart;
            var end = input.selectionEnd;ay notification sound');
            var text = input.value;
            
            input.value = text.substring(0, start) + emoji + text.substring(end);
            input.selectionStart = input.selectionEnd = start + emoji.length;
            input.focus();lper
            
            $('.psource-chat-emoji-picker').hide();k) {
            this.updateCharacterCount();equest', action, data);
        },  
            $.ajax({
        /**     url: this.settings.ajax_url,
         * Update character count
         */     data: $.extend({
        updateCharacterCount: function() {' + action,
            var input = this.container.find('.psource-chat-input');
            var counter = this.container.find('.psource-chat-message-counter .current-length');
            if (counter.length) {
                counter.text(input.val().length);
            }       console.log('PS Chat: AJAX Success', action, response);
        },          if (typeof callback === 'function') {
                        callback(response);
        /**         }
         * Start update loop,
         */     error: function(xhr, status, error) {
        startUpdateLoop: function() { Chat: AJAX Error', {
            if (this.updateTimer) {ion,
                clearInterval(this.updateTimer);
            }           error: error,
                        responseText: xhr.responseText,
            this.updateTimer = setInterval(function() {
                this.loadMessages();
                this.loadActiveUsers();
            }.bind(this), this.settings.update_interval);
        },          if (xhr.responseText) {
                        try {
        /**                 var parsed = JSON.parse(xhr.responseText);
         * Stop update loop if (parsed.error) {
         */                     errorMsg = parsed.error;
        stopUpdateLoop: function() {
            if (this.updateTimer) { {
                clearInterval(this.updateTimer);t JSON, show status text
                this.updateTimer = null;usText && xhr.statusText !== 'error') {
            }                   errorMsg = xhr.statusText;
        },                  }
                        }
        /**         }
         * Scroll to bottom
         */         if (typeof callback === 'function') {
        scrollToBottom: function() {ccess: false, error: errorMsg});
            var messages = this.container.find('.psource-chat-messages');
            messages.scrollTop(messages[0].scrollHeight);
        },  });
        },
        /**
         * Update message count in title or counter
         */Helper functions
        updateMessageCount: function() {
            var messageCount = this.container.find('.psource-chat-message').length;
            var counter = this.container.find('.psource-chat-message-count');
            if (counter.length) {
                counter.text(messageCount);
            }tMessage: function(message) {
            console.log('PS Chat: Updated message count to', messageCount);
        },
        
        /**matTime: function(timestamp) {
         * Play notification soundmestamp);
         */ return date.toLocaleTimeString('de-DE', {
        playSound: function() {,
            if (!this.soundEnabled) return;
            });
            try {
                var audio = new Audio(psource_chat_settings.plugin_url + '/audio/chime.mp3');
                audio.volume = 0.3;) {
                audio.play().catch(function() {_url + '/images/default-avatar.png';
                    // Ignore autoplay restrictions
                });
            } catch (e) {e: function() {
                console.log('Could not play notification sound');message').last();
            }eturn lastMessage.data('message-id') || 0;
        },
        
        /**GuestName: function(name) {
         * AJAX request helpere in session/cookie
         */ if (typeof Storage !== 'undefined') {
        ajaxRequest: function(action, data, callback) {t_name', name);
            console.log('PS Chat: AJAX Request', action, data);
            
            $.ajax({
                url: this.settings.ajax_url,
                type: 'POST', modal
                data: $.extend({
                    action: 'psource_chat_' + action,
                    nonce: this.settings.nonce
                }, data || {}),
                dataType: 'json', Showing user settings popup menu');
                success: function(response) {
                    console.log('PS Chat: AJAX Success', action, response);
                    if (typeof callback === 'function') {menu');
                        callback(response);
                    }ingMenu.remove();
                }.bind(this),ff('click.settingsOutside change.settingsMenu');
                error: function(xhr, status, error) {
                    console.error('PS Chat: AJAX Error', {
                        action: action,
                        status: status,irst
                        error: error,on-menu, .psource-chat-emoji-picker').remove();
                        responseText: xhr.responseText,
                        xhr: xhrttings menu
                    });l = 
                    v class="psource-chat-settings-menu">' +
                    var errorMsg = 'Verbindungsfehler';-Einstellungen</div>' +
                    if (xhr.responseText) {item">' +
                        try {:</label>' +
                            var parsed = JSON.parse(xhr.responseText); +
                            if (parsed.error) {>' +
                                errorMsg = parsed.error;
                            }
                        } catch (e) {
                            // If response is not JSON, show status text
                            if (xhr.statusText && xhr.statusText !== 'error') {
                                errorMsg = xhr.statusText;="settings-select">' +
                            }e="yes">An</option>' +
                        }value="no">Aus</option>' +
                    }lect>' +
                    iv>' +
                    if (typeof callback === 'function') {
                        callback({success: false, error: errorMsg});
                    }ect name="auto_open" class="settings-select">' +
                }<option value="yes">An</option>' +
            }); '<option value="no">Aus</option>' +
        },      '</select>' +
                '</div>' +
        /**     '</div>';
         * Helper functions
         */ // Add menu to body for better positioning
        escapeHtml: function(text) {l);
            return $('<div>').text(text).html();
        },  // Position menu relative to settings button
            var btn = this.container.find('.psource-chat-settings-btn');
        formatMessage: function(message) {ttings-menu');
            return this.escapeHtml(message).replace(/\n/g, '<br>');
        },  if (btn.length && menu.length) {
                var btnOffset = btn.offset();
        formatTime: function(timestamp) {Height();
            var date = new Date(timestamp);th();
            return date.toLocaleTimeString('de-DE', {
                hour: '2-digit',
                minute: '2-digit'xed',
            });     top: (btnOffset.top + btnHeight + 5) + 'px',
        },          left: (btnOffset.left - menu.outerWidth() + btnWidth) + 'px',
                    'z-index': '1000001',
        getDefaultAvatar: function() {
            return psource_chat_settings.plugin_url + '/images/default-avatar.png';
        },      
                console.log('PS Chat: Positioned settings menu at', btnOffset.top + btnHeight + 5, btnOffset.left - menu.outerWidth() + btnWidth);
        getLastMessageTime: function() {
            var lastMessage = this.container.find('.psource-chat-message').last();
            return lastMessage.data('message-id') || 0;
        },  this.loadUserSettingsInMenu();
            
        setGuestName: function(name) { unique namespace
            // Store guest name in session/cookie).on('change.settingsMenu', '.psource-chat-settings-menu .settings-select', function(e) {
            if (typeof Storage !== 'undefined') {
                localStorage.setItem('psource_chat_guest_name', name);
            }   var name = $(this).attr('name');
        },      var value = $(this).val();
                self.saveUserSetting(name, value);
        /**     console.log('PS Chat: Setting changed:', name, '=', value);
         * Show user settings modal
         */ 
        showUserSettings: function() { outside - use timeout to prevent immediate close
            var self = this;ion() {
                $(document).off('click.settingsOutside').on('click.settingsOutside', function(e) {
            console.log('PS Chat: Showing user settings popup menu');menu, .psource-chat-settings-btn').length) {
                        $('.psource-chat-settings-menu').remove();
            // Toggle behavior: if menu exists, remove ittside change.settingsMenu');
            var existingMenu = $('.psource-chat-settings-menu');
            if (existingMenu.length) {
                existingMenu.remove();
                $(document).off('click.settingsOutside change.settingsMenu');
                return;
            }
            oad user settings into compact menu
            // Remove any other menus first
            $('.psource-chat-moderation-menu, .psource-chat-emoji-picker').remove();
            var settings = {
            // Create compact settings menugetItem('psource_chat_user_sound') || 'yes',
            var menuHtml = fications: localStorage.getItem('psource_chat_user_notifications') || 'yes',
                '<div class="psource-chat-settings-menu">' +t_user_auto_open') || 'no'
                '<div class="settings-menu-header">Chat-Einstellungen</div>' +
                '<div class="settings-menu-item">' +
                '<label>Sound:</label>' +u select[name="enable_sound"]').val(settings.enable_sound);
                '<select name="enable_sound" class="settings-select">' +ions"]').val(settings.enable_notifications);
                '<option value="yes">An</option>' +ame="auto_open"]').val(settings.auto_open);
            
            // Apply settings
            this.soundEnabled = (settings.enable_sound === 'yes');
            this.notificationsEnabled = (settings.enable_notifications === 'yes');
            this.autoOpenEnabled = (settings.auto_open === 'yes');
        },
        
        /**
         * Hide user settings modal
         */
        hideUserSettings: function() {
            $('.psource-chat-settings-modal').fadeOut(200);
        },
        
        /**
         * Load user settings from localStorage
         */
        loadUserSettings: function() {
            var settings = {
                enable_sound: localStorage.getItem('psource_chat_user_sound') || 'yes',
                enable_notifications: localStorage.getItem('psource_chat_user_notifications') || 'yes',
                auto_open: localStorage.getItem('psource_chat_user_auto_open') || 'no'
            };
            
            $('.psource-chat-settings-modal select[name="enable_sound"]').val(settings.enable_sound);
            $('.psource-chat-settings-modal select[name="enable_notifications"]').val(settings.enable_notifications);
            $('.psource-chat-settings-modal select[name="auto_open"]').val(settings.auto_open);
            
            // Apply settings
            this.soundEnabled = (settings.enable_sound === 'yes');
            this.notificationsEnabled = (settings.enable_notifications === 'yes');
            this.autoOpenEnabled = (settings.auto_open === 'yes');
        },
        
        /**
         * Save user setting
         */
        saveUserSetting: function(name, value) {
            localStorage.setItem('psource_chat_user_' + name, value);
            
            // Apply setting immediately
            switch (name) {
                case 'enable_sound':
                    this.soundEnabled = (value === 'yes');
                    break;
                case 'enable_notifications':
                    this.notificationsEnabled = (value === 'yes');
                    break;
                case 'auto_open':
                    this.autoOpenEnabled = (value === 'yes');
                    break;
            }
            
            console.log('PS Chat: Saved user setting', name, '=', value);
        },
        
        /**
         * Show moderation tools - compact menu
         */
        showModerationTools: function() {
            var self = this;
            
            console.log('PS Chat: Showing compact moderation tools menu');
            
            // Toggle behavior: if menu exists, remove it
            var existingMenu = $('.psource-chat-moderation-menu');
            if (existingMenu.length) {
                existingMenu.remove();
                $(document).off('click.moderationMenu click.moderationOutside');
                return;
            }
            
            // Remove any other menus first
            $('.psource-chat-settings-menu, .psource-chat-emoji-picker').remove();
            
            var actions = [
                {text: '🗑️ Chat leeren', action: 'clear_chat', confirm: 'Alle Nachrichten löschen?'},
                {text: '🔒 Chat sperren', action: 'lock_chat', confirm: 'Chat für neue Nachrichten sperren?'},
                {text: '🔓 Chat entsperren', action: 'unlock_chat', confirm: 'Chat entsperren?'},
                {text: '👢 Benutzer kicken', action: 'kick_user', prompt: 'Benutzername eingeben:'}
            ];
            
            var menuHtml = '<div class="psource-chat-moderation-menu">';
            menuHtml += '<div class="moderation-menu-header">Moderator-Tools</div>';
            actions.forEach(function(action) {
                menuHtml += '<div class="moderation-menu-item" data-action="' + action.action + '" data-confirm="' + (action.confirm || '') + '" data-prompt="' + (action.prompt || '') + '">' + action.text + '</div>';
            });
            menuHtml += '</div>';
            
            // Add menu to body for better positioning
            $('body').append(menuHtml);
            
            // Position menu relative to moderation button
            var btn = this.container.find('.psource-chat-moderate-btn');
            var menu = $('.psource-chat-moderation-menu');
            
            if (btn.length && menu.length) {
                var btnOffset = btn.offset();
                var btnHeight = btn.outerHeight();
                var btnWidth = btn.outerWidth();
                
                menu.css({
                    position: 'fixed',
                    top: (btnOffset.top + btnHeight + 5) + 'px',
                    left: (btnOffset.left - menu.outerWidth() + btnWidth) + 'px',
                    'z-index': '1000001',
                    display: 'block'
                });
                
                console.log('PS Chat: Positioned moderation menu at', btnOffset.top + btnHeight + 5, btnOffset.left - menu.outerWidth() + btnWidth);
            }
            
            // Bind menu events with unique namespaces
            $(document).off('click.moderationMenu').on('click.moderationMenu', '.psource-chat-moderation-menu .moderation-menu-item', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                var action = $(this).data('action');
                var confirmText = $(this).data('confirm');
                var promptText = $(this).data('prompt');
                
                console.log('PS Chat: Moderation action clicked:', action);
                
                // Handle confirmation or prompt
                var proceed = true;
                var userInput = null;
                
                if (confirmText) {
                    proceed = confirm(confirmText);
                } else if (promptText) {
                    userInput = prompt(promptText);
                    proceed = (userInput !== null && userInput.trim() !== '');
                }
                
                if (proceed) {
                    self.executeModerationAction(action, userInput);
                }
                
                // Remove menu
                $('.psource-chat-moderation-menu').remove();
                $(document).off('click.moderationMenu click.moderationOutside');
            });
            
            // Hide menu when clicking outside - use timeout to prevent immediate close
            setTimeout(function() {
                $(document).off('click.moderationOutside').on('click.moderationOutside', function(e) {
                    if (!$(e.target).closest('.psource-chat-moderation-menu, .psource-chat-moderate-btn').length) {
                        $('.psource-chat-moderation-menu').remove();
                        $(document).off('click.moderationOutside click.moderationMenu');
                    }
                });
            }, 100);
        },
        
        /**
         * Execute moderation action
         */
        executeModerationAction: function(action, userInput) {
            var self = this;
            
            console.log('PS Chat: Executing moderation action:', action, userInput);
            
            switch (action) {
                case 'clear_chat':
                    this.ajaxRequest('moderate_clear', {}, function(response) {
                        if (response.success) {
                            self.container.find('.psource-chat-messages').html(
                                '<div class="psource-chat-welcome">' +
                                '<h4>Chat wurde geleert</h4>' +
                                '<p>Alle Nachrichten wurden entfernt.</p>' +
                                '</div>'
                            );
                            console.log('PS Chat: Chat cleared successfully');
                        } else {
                            alert('Fehler beim Leeren des Chats: ' + (response.data || 'Unbekannter Fehler'));
                        }
                    });
                    break;
                
                case 'lock_chat':
                    this.ajaxRequest('moderate_lock', {locked: true}, function(response) {
                        if (response.success) {
                            self.container.find('.psource-chat-input').prop('disabled', true);
                            alert('Chat wurde gesperrt.');
                            console.log('PS Chat: Chat locked successfully');
                        } else {
                            alert('Fehler beim Sperren des Chats: ' + (response.data || 'Unbekannter Fehler'));
                        }
                    });
                    break;
                
                case 'unlock_chat':
                    this.ajaxRequest('moderate_lock', {locked: false}, function(response) {
                        if (response.success) {
                            self.container.find('.psource-chat-input').prop('disabled', false);
                            alert('Chat wurde entsperrt.');
                            console.log('PS Chat: Chat unlocked successfully');
                        } else {
                            alert('Fehler beim Entsperren des Chats: ' + (response.data || 'Unbekannter Fehler'));
                        }
                    });
                    break;
                
                case 'kick_user':
                    if (userInput && userInput.trim()) {
                        this.ajaxRequest('moderate_kick', {username: userInput.trim()}, function(response) {
                            if (response.success) {
                                alert('Benutzer ' + userInput + ' wurde gekickt.');
                                console.log('PS Chat: User kicked successfully:', userInput);
                            } else {
                                alert('Fehler beim Kicken des Benutzers: ' + (response.data || 'Unbekannter Fehler'));
                            }
                        });
                    }
                    break;
                    
                default:
                    console.log('PS Chat: Unknown moderation action:', action);
                    break;
            }
        },
        
        /**
         * Switch emoji category
         */
        switchEmojiCategory: function(category) {
            // Update active tab
            $('.psource-chat-emoji-picker .emoji-tab').removeClass('active');
            $('.psource-chat-emoji-picker .emoji-tab[data-category="' + category + '"]').addClass('active');
            
            // Show selected category
            $('.psource-chat-emoji-picker .emoji-category').hide();
            $('.psource-chat-emoji-picker .emoji-category[data-category="' + category + '"]').show();
        },
        
        /**
         * Search GIFs using GIPHY API
         */
        searchGifs: function(query) {
            if (!query) return;
            
            var resultsContainer = $('.psource-chat-emoji-picker .gif-grid');
            var loadingIndicator = $('.psource-chat-emoji-picker .gif-loading');
            
            loadingIndicator.show();
            resultsContainer.empty();
            
            // Using GIPHY API (you would need to register for an API key)
            // For now, we'll use a placeholder
            setTimeout(function() {
                loadingIndicator.hide();
                resultsContainer.html('<p>GIF-Suche benötigt GIPHY API-Key. Konfiguration in den Plugin-Einstellungen.</p>');
            }, 1000);
        },
        
        /**
         * Insert GIF into message
         */
        insertGif: function(gifUrl) {
            var input = this.container.find('.psource-chat-input');
            var currentValue = input.val();
            var gifMarkdown = '[GIF](' + gifUrl + ')';
            
            input.val(currentValue + ' ' + gifMarkdown);
            this.updateCharacterCount();
            
            // Hide emoji picker
            $('.psource-chat-emoji-picker').hide();
        },
        
        /**
         * Show notification indicator
         */
        showNotificationIndicator: function() {
            if (this.notificationsEnabled && this.minimized) {
                var indicator = this.container.find('.psource-chat-notification-indicator');
                indicator.show().addClass('pulse');
                
                // Blink title if enabled
                if (this.settings.visual_notifications) {
                    this.blinkTitle();
                }
            }
        },
        
        /**
         * Hide notification indicator
         */
        hideNotificationIndicator: function() {
            this.container.find('.psource-chat-notification-indicator').hide().removeClass('pulse');
            this.stopBlinkTitle();
        },
        
        /**
         * Blink chat title
         */
        blinkTitle: function() {
            var title = this.container.find('.psource-chat-title');
            this.blinkInterval = setInterval(function() {
                title.toggleClass('blink');
            }, 500);
        },
        
        /**
         * Stop blinking title
         */
        stopBlinkTitle: function() {
            if (this.blinkInterval) {
                clearInterval(this.blinkInterval);
                this.blinkInterval = null;
            }
            this.container.find('.psource-chat-title').removeClass('blink');
        },
        
        saveState: function() {
            if (typeof Storage !== 'undefined') {
                localStorage.setItem('psource_chat_minimized', this.minimized);
                console.log('PS Chat: Saved state - minimized:', this.minimized);
            }
        },
        
        loadState: function() {
            if (typeof Storage !== 'undefined') {
                var saved = localStorage.getItem('psource_chat_minimized');
                if (saved !== null) {
                    var minimized = (saved === 'true');
                    console.log('PS Chat: Loaded state from localStorage - minimized:', minimized);
                    return minimized;
                }
            }
            console.log('PS Chat: No saved state found');
            return null;
        },
        
        /**
         * Monitor and restore minimize icon if it disappears
         */
        monitorMinimizeIcon: function() {
            var self = this;
            
            setInterval(function() {
                if (!self.container || !self.container.length) return;
                
                var minimizeBtn = self.container.find('.psource-chat-minimize');
                var svg = minimizeBtn.find('svg');
                
                // Check if button exists but SVG is missing or empty
                if (minimizeBtn.length && (!svg.length || !svg.html().trim())) {
                    console.log('PS Chat: Minimize icon disappeared, restoring...');
                    self.updateMinimizeIcon();
                }
                
                // Also ensure button is visible
                if (minimizeBtn.length) {
                    var display = minimizeBtn.css('display');
                    var visibility = minimizeBtn.css('visibility');
                    var opacity = minimizeBtn.css('opacity');
                    
                    if (display === 'none' || visibility === 'hidden' || opacity === '0') {
                        console.log('PS Chat: Minimize button hidden, making visible...');
                        minimizeBtn.css({
                            'display': 'inline-block',
                            'visibility': 'visible',
                            'opacity': '1'
                        });
                    }
                }
                
            }, 2000); // Check every 2 seconds
        },
    };
    
    // Auto-initialize when DOM ready
    $(document).ready(function() {
        if (typeof window.psourceChatConfig !== 'undefined') {
            PSSourceChat.init(window.psourceChatConfig);
            
            // Add additional monitoring for position fixes
            $(window).on('resize scroll', function() {
                if (PSSourceChat.container) {
                    PSSourceChat.forceFixedPositioning();
                }
            });
            
            // Force positioning every 5 seconds to override any theme interference
            setInterval(function() {
                if (PSSourceChat.container && PSSourceChat.container.is(':visible')) {
                    PSSourceChat.forceFixedPositioning();
                }
            }, 5000);
        }
    });
    
})(jQuery);
